import * as fs from 'fs';
import { program, Option } from 'commander';

import { makeBuilder } from '../arb/Race';
import { RaceSolver } from '../../RaceSolver';

const NS_US = BigInt(1000);

program
	.argument('<cases>', 'JSON file of test cases (generated by create-checkpoint)')
	.addOption(new Option('--timestep <dt>', 'integration timestep in seconds')
		.default(1/15, '1/15')
		.argParser(ts => ts.split('/').reduceRight((a,b) => +b / +a, 1.0)));

program.parse();
const options = program.opts();

const cases = JSON.parse(fs.readFileSync(program.args[0], 'utf-8')).map(c => c.params);

console.time('all');

const times = cases.reduce((times,params) => {
	const builder = makeBuilder(params);
	params.skillsUnderTest.forEach(id => builder.addSkill(id));
	const g = builder.build();
	for (let i = 0; i < params.nsamples; ++i) {
		const s = g.next().value as RaceSolver;
		const start = process.hrtime.bigint();
		while (s.pos < builder._course.distance) {
			s.step(options.timestep);
		}
		const t = process.hrtime.bigint() - start;
		times.push(Number(t / NS_US) + Number(t % NS_US) / Number(NS_US));
	}
	return times;
}, []);

console.timeEnd('all');

times.sort((a,b) => a < b ? -1 : b < a ? 1 : 0);

const mid = Math.floor(times.length / 2);
const median = (times.length % 2 == 0 ? (times[mid-1] + times[mid]) / 2 : times[mid]);
const mean = (times.reduce((a,b) => a + b) / times.length);
const stddev = Math.sqrt(times.reduce((a,b) => a + Math.pow(b - mean, 2), 0) / times.length);

console.log('\ntime per solve:');
console.log('min ' + times[0] + 'μs');
console.log('max ' + times[times.length-1] + 'μs');
console.log('median ' + median + 'μs');
console.log('mean ' + mean + 'μs');
console.log('stddev ' + stddev + 'μs');
